{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"kaggle_titanic","provenance":[{"file_id":"1j1N4AR3IZlAAE3cnTBjV9p1XKNHio2q1","timestamp":1582171007674},{"file_id":"1K9bRq6Xw-rw__cMcTbxTDE377EwYIniR","timestamp":1582092960531},{"file_id":"1NymCfhfF4s7hUOYkTSxa2yP8C5Ke7LFm","timestamp":1581924104254}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"n7UPUR_cOORC","colab_type":"code","outputId":"461864a6-f00b-42cf-ef98-ac65610b059d","executionInfo":{"status":"ok","timestamp":1582207247921,"user_tz":-540,"elapsed":6166,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":224}},"source":["!pip install kaggle"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.21.0)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.0.0)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.24.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.28.1)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.12.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.6/dist-packages (from kaggle) (2019.11.28)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.6.1)\n","Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (2.8)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->kaggle) (3.0.4)\n","Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.6/dist-packages (from python-slugify->kaggle) (1.3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lJ6ismtgS0TR","colab_type":"code","outputId":"a8a415dd-12a4-4d36-c5a7-5aa48bebccd2","executionInfo":{"status":"ok","timestamp":1582207280925,"user_tz":-540,"elapsed":39162,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":54}},"source":["from google.colab import files\n","files.upload()"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-6e565156-a062-44bf-808a-9b43fa8f017a\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-6e565156-a062-44bf-808a-9b43fa8f017a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["{}"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"tYBvygnQT2jI","colab_type":"code","colab":{}},"source":["!mkdir -p ~/.kaggle"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HLPgqEngT36F","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"3eb94672-1986-42ab-b3ea-435367585e65","executionInfo":{"status":"ok","timestamp":1582207286609,"user_tz":-540,"elapsed":44837,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}}},"source":["!mv kaggle.json ~/.kaggle/"],"execution_count":4,"outputs":[{"output_type":"stream","text":["mv: cannot stat 'kaggle.json': No such file or directory\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BXMKou8aT5Hi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0390d082-39e6-4f93-a300-a7b3355ec562","executionInfo":{"status":"ok","timestamp":1582207289265,"user_tz":-540,"elapsed":47489,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}}},"source":["!chmod 600 /root/.kaggle/kaggle.json"],"execution_count":5,"outputs":[{"output_type":"stream","text":["chmod: cannot access '/root/.kaggle/kaggle.json': No such file or directory\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uevfVUjRT6vl","colab_type":"code","outputId":"cdf53bee-cce2-4acb-a979-7c9af9b80200","executionInfo":{"status":"error","timestamp":1582207290890,"user_tz":-540,"elapsed":49110,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":636}},"source":["# download API key from google drive\n","## Original: https://colab.research.google.com/drive/1eufc8aNCdjHbrBhuy7M7X6BGyzAyRbrF#scrollTo=y5_288BYp6H1\n","## When you run for the first time, you will see a link to authenticate.\n","\n","from googleapiclient.discovery import build\n","import io, os\n","from googleapiclient.http import MediaIoBaseDownload\n","from google.colab import auth\n","\n","auth.authenticate_user()\n","\n","drive_service = build('drive', 'v3')\n","results = drive_service.files().list(\n","        q=\"name = 'kaggle.json'\", fields=\"files(id)\").execute()\n","kaggle_api_key = results.get('files', [])\n","\n","filename = \"/content/.kaggle/kaggle.json\"\n","os.makedirs(os.path.dirname(filename), exist_ok=True)\n","\n","request = drive_service.files().get_media(fileId=kaggle_api_key[0]['id'])\n","fh = io.FileIO(filename, 'wb')\n","downloader = MediaIoBaseDownload(fh, request)\n","done = False\n","while done is False:\n","    status, done = downloader.next_chunk()\n","    print(\"Download %d%%.\" % int(status.progress() * 100))\n","os.chmod(filename, 600)"],"execution_count":6,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    729\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    465\u001b[0m         \"\"\"\n\u001b[0;32m--> 466\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    467\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-c15f7164f5a9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mauth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mauth\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauthenticate_user\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mdrive_service\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'drive'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'v3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/auth.py\u001b[0m in \u001b[0;36mauthenticate_user\u001b[0;34m(clear_output)\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0mcontext_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtemporary\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mclear_output\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0m_noop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mcontext_manager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 147\u001b[0;31m       \u001b[0m_gcloud_login\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    148\u001b[0m     \u001b[0m_install_adc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0mcolab_tpu_addr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menviron\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'COLAB_TPU_ADDR'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/auth.py\u001b[0m in \u001b[0;36m_gcloud_login\u001b[0;34m()\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;31m# https://github.com/jupyter/notebook/issues/3159\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m     \u001b[0mprompt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprompt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m     \u001b[0mcode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_getpass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'\\n\\nEnter verification code: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m     \u001b[0mgcloud_process\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m   \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mgetpass\u001b[0;34m(self, prompt, stream)\u001b[0m\n\u001b[1;32m    686\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 688\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    689\u001b[0m         )\n\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    733\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    734\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 735\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    736\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    737\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"UlcHJ4p_T7zu","colab_type":"code","colab":{}},"source":["!kaggle competitions download -c titanic"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yWbuo2rj1oDd","colab_type":"text"},"source":["#データ整形\n"]},{"cell_type":"code","metadata":{"id":"F2eqakGPUCFA","colab_type":"code","colab":{}},"source":["#データ取得\n","import pandas as pd\n","import numpy as np\n","train_df = pd.read_csv(\"train.csv\")\n","test_df = pd.read_csv(\"test.csv\")\n","passengerId_data=test_df.PassengerId.values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SK84u0iuiMZp","colab_type":"code","outputId":"f4ee486b-78a5-4556-ef54-66060e121a06","executionInfo":{"status":"ok","timestamp":1582171113332,"user_tz":-540,"elapsed":1661,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["sep_forward = train_df[\"Name\"].str.split(\",\",expand=True)\n","sep_backward = sep_forward[1].str.split(\".\",expand=True)\n","job = sep_backward[0].str.replace(\" \",\"\")\n","train_df[\"Title\"] = job\n","\n","display(train_df[\"Title\"].unique())"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',\n","       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'theCountess',\n","       'Jonkheer'], dtype=object)"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"JL3dMi6-iUk-","colab_type":"code","outputId":"3eb1f1e6-a3ac-4c26-82df-c94e5cb57cd9","executionInfo":{"status":"ok","timestamp":1582171113333,"user_tz":-540,"elapsed":802,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":627}},"source":["display(train_df.groupby(by=[\"Title\"]).count())"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>Title</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Capt</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Col</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Don</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Dr</th>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>Jonkheer</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Lady</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Major</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Master</th>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>36</td>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>40</td>\n","      <td>7</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>Miss</th>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>146</td>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>182</td>\n","      <td>47</td>\n","      <td>181</td>\n","    </tr>\n","    <tr>\n","      <th>Mlle</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Mme</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Mr</th>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>398</td>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>517</td>\n","      <td>93</td>\n","      <td>517</td>\n","    </tr>\n","    <tr>\n","      <th>Mrs</th>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>108</td>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>125</td>\n","      <td>44</td>\n","      <td>124</td>\n","    </tr>\n","    <tr>\n","      <th>Ms</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Rev</th>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Sir</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>theCountess</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             PassengerId  Survived  Pclass  Name  ...  Ticket  Fare  Cabin  Embarked\n","Title                                             ...                               \n","Capt                   1         1       1     1  ...       1     1      1         1\n","Col                    2         2       2     2  ...       2     2      1         2\n","Don                    1         1       1     1  ...       1     1      0         1\n","Dr                     7         7       7     7  ...       7     7      3         7\n","Jonkheer               1         1       1     1  ...       1     1      0         1\n","Lady                   1         1       1     1  ...       1     1      1         1\n","Major                  2         2       2     2  ...       2     2      2         2\n","Master                40        40      40    40  ...      40    40      7        40\n","Miss                 182       182     182   182  ...     182   182     47       181\n","Mlle                   2         2       2     2  ...       2     2      2         2\n","Mme                    1         1       1     1  ...       1     1      1         1\n","Mr                   517       517     517   517  ...     517   517     93       517\n","Mrs                  125       125     125   125  ...     125   125     44       124\n","Ms                     1         1       1     1  ...       1     1      0         1\n","Rev                    6         6       6     6  ...       6     6      0         6\n","Sir                    1         1       1     1  ...       1     1      1         1\n","theCountess            1         1       1     1  ...       1     1      1         1\n","\n","[17 rows x 12 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ytQkpGL8iUuv","colab_type":"code","outputId":"4bb86465-dbb1-4cfe-962f-aa54b934d1da","executionInfo":{"status":"ok","timestamp":1582171115451,"user_tz":-540,"elapsed":2044,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":607}},"source":["display(train_df.groupby(by=[\"Title\"])[\"Survived\"].agg([\"mean\",\"count\"]))"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean</th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Title</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Capt</th>\n","      <td>0.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Col</th>\n","      <td>0.500000</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Don</th>\n","      <td>0.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Dr</th>\n","      <td>0.428571</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>Jonkheer</th>\n","      <td>0.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Lady</th>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Major</th>\n","      <td>0.500000</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Master</th>\n","      <td>0.575000</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>Miss</th>\n","      <td>0.697802</td>\n","      <td>182</td>\n","    </tr>\n","    <tr>\n","      <th>Mlle</th>\n","      <td>1.000000</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Mme</th>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Mr</th>\n","      <td>0.156673</td>\n","      <td>517</td>\n","    </tr>\n","    <tr>\n","      <th>Mrs</th>\n","      <td>0.792000</td>\n","      <td>125</td>\n","    </tr>\n","    <tr>\n","      <th>Ms</th>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Rev</th>\n","      <td>0.000000</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Sir</th>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>theCountess</th>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 mean  count\n","Title                       \n","Capt         0.000000      1\n","Col          0.500000      2\n","Don          0.000000      1\n","Dr           0.428571      7\n","Jonkheer     0.000000      1\n","Lady         1.000000      1\n","Major        0.500000      2\n","Master       0.575000     40\n","Miss         0.697802    182\n","Mlle         1.000000      2\n","Mme          1.000000      1\n","Mr           0.156673    517\n","Mrs          0.792000    125\n","Ms           1.000000      1\n","Rev          0.000000      6\n","Sir          1.000000      1\n","theCountess  1.000000      1"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"vivnOmTiicOf","colab_type":"code","outputId":"d5028779-0e07-4548-ff6f-83bfc2a6446d","executionInfo":{"status":"ok","timestamp":1582171115892,"user_tz":-540,"elapsed":1518,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":410}},"source":["sep_forward = test_df[\"Name\"].str.split(\",\",expand=True)\n","sep_backward = sep_forward[1].str.split(\".\",expand=True)\n","job = sep_backward[0].str.replace(\" \",\"\")\n","test_df[\"Title\"] = job\n","display(test_df.groupby(by=[\"Title\"]).agg([\"count\"]))"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Title</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Col</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Dona</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Dr</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Master</th>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>17</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>21</td>\n","      <td>2</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>Miss</th>\n","      <td>78</td>\n","      <td>78</td>\n","      <td>78</td>\n","      <td>78</td>\n","      <td>64</td>\n","      <td>78</td>\n","      <td>78</td>\n","      <td>78</td>\n","      <td>78</td>\n","      <td>11</td>\n","      <td>78</td>\n","    </tr>\n","    <tr>\n","      <th>Mr</th>\n","      <td>240</td>\n","      <td>240</td>\n","      <td>240</td>\n","      <td>240</td>\n","      <td>183</td>\n","      <td>240</td>\n","      <td>240</td>\n","      <td>240</td>\n","      <td>239</td>\n","      <td>42</td>\n","      <td>240</td>\n","    </tr>\n","    <tr>\n","      <th>Mrs</th>\n","      <td>72</td>\n","      <td>72</td>\n","      <td>72</td>\n","      <td>72</td>\n","      <td>62</td>\n","      <td>72</td>\n","      <td>72</td>\n","      <td>72</td>\n","      <td>72</td>\n","      <td>32</td>\n","      <td>72</td>\n","    </tr>\n","    <tr>\n","      <th>Ms</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Rev</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId Pclass  Name   Sex   Age  ... Parch Ticket  Fare Cabin Embarked\n","             count  count count count count  ... count  count count count    count\n","Title                                        ...                                  \n","Col              2      2     2     2     2  ...     2      2     2     2        2\n","Dona             1      1     1     1     1  ...     1      1     1     1        1\n","Dr               1      1     1     1     1  ...     1      1     1     1        1\n","Master          21     21    21    21    17  ...    21     21    21     2       21\n","Miss            78     78    78    78    64  ...    78     78    78    11       78\n","Mr             240    240   240   240   183  ...   240    240   239    42      240\n","Mrs             72     72    72    72    62  ...    72     72    72    32       72\n","Ms               1      1     1     1     0  ...     1      1     1     0        1\n","Rev              2      2     2     2     2  ...     2      2     2     0        2\n","\n","[9 rows x 11 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"SbsoXJG7icGG","colab_type":"code","colab":{}},"source":["from sklearn.preprocessing import LabelEncoder\n","def data_shape(df):\n","    df.drop('PassengerId', axis=1, inplace=True)\n","    df.drop('Ticket', axis=1, inplace=True)\n","    \n","    for dataset in df:\n","        df['Title'] =df['Title'].replace('Master', 'Child')\n","        df['Title'] =df['Title'].replace(['Mlle','Jonkheer', 'Ms'], 'Miss')\n","        df['Title'] =df['Title'].replace(['Capt','Col','Don','Dr','Rev','Sir','Major'], 'Mr')\n","        df['Title'] =df['Title'].replace(['Mme','Lady', 'theCountess','Dona'],'Mrs')\n","    \n","    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 3}\n","    df['Title'] = df['Title'].map(title_mapping)\n","    df['Title'] = df['Title'].fillna(0)\n","    \n","    df.drop('Name', axis=1, inplace=True)\n","    \n","    df.Embarked = df.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])\n","    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace = True)\n","    \n","    df.Sex = df.Sex.replace(['male', 'female'], [0, 1])\n","    df.Cabin = df.Cabin.fillna('Unknown')\n","    df['FamilySize'] = 1+ df['Parch'] + df['SibSp'] \n","    for dataset in df:\n","        df['IsAlone'] = 0\n","        df.loc[df['FamilySize'] == 1, 'IsAlone'] = 1\n","    # Fareをカテゴリ分け\n","    df['Fare'].fillna(df['Fare'].median(), inplace = True)\n","    df['FareCategory'] = pd.qcut(df['Fare'], 4)\n","    df['FareCategory'] = LabelEncoder().fit_transform(df['FareCategory'])\n","    df.drop('Fare', axis=1, inplace=True)\n","\n","    # Ageの欠損を中央値で補間\n","    \n","    df['Age'].fillna(df['Age'].median(),inplace=True)\n","    df.loc[ df['Age'] <= 16, 'Age']= 0\n","    df.loc[(df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1\n","    df.loc[(df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2\n","    df.loc[(df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3\n","    df.loc[ df['Age'] > 64, 'Age'] = 4 ;\n","    \n","    df.drop('SibSp', axis=1, inplace=True)\n","    df.drop('Parch', axis=1, inplace=True)\n","    \n","    levels = []\n","    # 1文字目を取り出す\n","    for level in df.Cabin:\n","        levels.append(level[0])    \n","    df.Cabin = pd.DataFrame(levels)\n","    df.Cabin = df.Cabin.replace('T','U')\n","    df.Cabin = df.Cabin.replace(['A','B','C','D','E','F','G','U'], [0, 1, 2, 3, 4, 5, 6, 7])\n","    return df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5McynMvqicC-","colab_type":"code","outputId":"954380c2-9da6-4f01-c3ae-83667fb9f0a2","executionInfo":{"status":"ok","timestamp":1582171118043,"user_tz":-540,"elapsed":2081,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":224}},"source":["train_df=data_shape(train_df)\n","test_df=data_shape(test_df)\n","train_df.head()"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>FamilySize</th>\n","      <th>IsAlone</th>\n","      <th>FareCategory</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>7</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2.0</td>\n","      <td>2</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>7</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2.0</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2.0</td>\n","      <td>7</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  ...  Title  FamilySize  IsAlone  FareCategory\n","0         0       3    0  1.0  ...    1.0           2        0             0\n","1         1       1    1  2.0  ...    3.0           2        0             3\n","2         1       3    1  1.0  ...    2.0           1        1             1\n","3         1       1    1  2.0  ...    3.0           2        0             3\n","4         0       3    0  2.0  ...    1.0           1        1             1\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"x5DYEjv9ibab","colab_type":"code","outputId":"73d91a41-fd9d-4f72-a549-c3bbee1a3889","executionInfo":{"status":"ok","timestamp":1582171119660,"user_tz":-540,"elapsed":1956,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["train_df.isnull().sum()"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Survived        0\n","Pclass          0\n","Sex             0\n","Age             0\n","Cabin           0\n","Embarked        0\n","Title           0\n","FamilySize      0\n","IsAlone         0\n","FareCategory    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"Z3SH14UBibWm","colab_type":"code","colab":{}},"source":["#データの分割(t_train:正解ラベル,x_train:トレーニングデータ)\n","t_train=train_df[\"Survived\"].values\n","x_train=train_df\n","x_train.drop(\"Survived\",axis=1,inplace=True)\n","x_train=x_train.values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"H33ZG4_HibR6","colab_type":"code","colab":{}},"source":["#データの分割\n","x_test=test_df.values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GPRmnuO4ibH4","colab_type":"code","colab":{}},"source":["#正規化\n","from sklearn.preprocessing import StandardScaler,MinMaxScaler\n","std_scl = StandardScaler() #MinMaxScaler() or Robustscaler\n","x_train=std_scl.fit_transform(x_train).astype(np.int64)\n","x_test=std_scl.fit_transform(x_test).astype(np.int64)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xAOxuwWt1uUo","colab_type":"text"},"source":["#モデル構築"]},{"cell_type":"code","metadata":{"id":"L5Rcj4qria0l","colab_type":"code","outputId":"6663e6ef-2c89-47c7-90ba-4f969ee4ef1b","executionInfo":{"status":"ok","timestamp":1582175519425,"user_tz":-540,"elapsed":5800,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["#モデルの構築\n","!pip install xgboost\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.ensemble import GradientBoostingClassifier \n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","\n","c = 1.0\n","models = []\n","\n","model_LogisticRegression=LogisticRegression(C=c, solver='liblinear', random_state=0)\n","models.append((\"LogisticRegression\",model_LogisticRegression))\n","\n","model_SVC=SVC(random_state=1,C=20,gamma=0.25)\n","models.append((\"SVC\",model_SVC))\n","\n","model_LinearSVC=LinearSVC()\n","models.append((\"LinearSVC\",model_LinearSVC))\n","\n","model_RandomForestClassifier=RandomForestClassifier()\n","models.append((\"RandomForestClassifier\",model_RandomForestClassifier))\n","\n","model_KNeighbors=KNeighborsClassifier()\n","models.append((\"KNeighbors\",model_KNeighbors))\n","\n","model_DecisionTree=DecisionTreeClassifier()\n","models.append((\"DecisionTree\",model_DecisionTree))\n","\n","model_RandomForestClassifier=RandomForestClassifier()\n","models.append((\"RandomForest\",model_RandomForestClassifier))\n","\n","model_MLPClassifier=MLPClassifier(solver='lbfgs', random_state=0)\n","models.append((\"MLPClassifier\",model_MLPClassifier))\n","\n","model_GradientBoostingClassifier=GradientBoostingClassifier(random_state=1)\n","models.append((\"GradientBoostingClassifier\",model_GradientBoostingClassifier))\n","\n","model_XGBClassifer=XGBClassifier(max_depth=7, learning_rate=0.1, n_estimators=100)\n","models.append((\"XGBClassifer\",model_XGBClassifer))"],"execution_count":54,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: xgboost in /usr/local/lib/python3.6/dist-packages (0.90)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from xgboost) (1.4.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from xgboost) (1.17.5)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3_17ykJUyXge","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":309},"outputId":"f379bb83-98b1-4b5a-a207-5a5aba6f138b","executionInfo":{"status":"ok","timestamp":1582175549398,"user_tz":-540,"elapsed":4366,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}}},"source":["#交差検証,結果の出力\n","from sklearn.model_selection import cross_val_score\n","\n","results = []\n","names = []\n","\n","for name,model in models:\n","    result = cross_val_score(model, x_train,t_train ,  cv=3)\n","    names.append(name)\n","    results.append(result)\n","\n","for i in range(len(names)):\n","    print(names[i],results[i].mean())"],"execution_count":56,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:470: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"],"name":"stderr"},{"output_type":"stream","text":["LogisticRegression 0.7699214365881032\n","SVC 0.797979797979798\n","LinearSVC 0.7811447811447811\n","RandomForestClassifier 0.8024691358024691\n","KNeighbors 0.7643097643097643\n","DecisionTree 0.7946127946127947\n","RandomForest 0.8013468013468014\n","MLPClassifier 0.7811447811447811\n","GradientBoostingClassifier 0.7946127946127947\n","XGBClassifer 0.8125701459034792\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8CMzyGFa0L8h","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"25f45e0e-669d-4a5c-cfd1-3db399c19c1c","executionInfo":{"status":"ok","timestamp":1582175579712,"user_tz":-540,"elapsed":24958,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}}},"source":["##NNモデル構築,交差検証 \n","from sklearn.model_selection import train_test_split\n","nnX_train,nnX_test,nnY_train,nnY_test =train_test_split(x_train,t_train,test_size=0.2)\n","\n","from keras.models import Sequential\n","from keras.layers import Dense,Dropout,Activation,BatchNormalization,Flatten\n","from keras.optimizers import Adam\n","batch_size=50\n","epochs=100\n","model_nn = Sequential([                       \n","    Dense(50,input_dim=train_df.shape[1], activation='relu'),\n","    BatchNormalization(),\n","    Dense(20, activation='relu'),\n","    BatchNormalization(),\n","    Dropout(0.2),\n","    Dense(1, activation='sigmoid')\n","])\n","model_nn.compile(optimizer='adam', \n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","\n","\n","\n","from sklearn.model_selection import KFold\n","kf = KFold(n_splits=3, shuffle=True)\n","\n","#kf.splitはループごとに学習データとバリデーションデータのインデックス番号を出力\n","for train_index, val_index in kf.split(nnX_train,nnY_train):\n","  train_data=nnX_train[train_index]\n","  train_label=nnY_train[train_index]\n","  val_data=nnX_train[val_index]\n","  val_label=nnY_train[val_index]\n","\n","  history=model_nn.fit(train_data,\n","                    train_label,\n","                    epochs=epochs,\n","                    batch_size=batch_size,\n","                    validation_data=(val_data,val_label))\n"],"execution_count":57,"outputs":[{"output_type":"stream","text":["Train on 474 samples, validate on 238 samples\n","Epoch 1/100\n","474/474 [==============================] - 1s 2ms/step - loss: 0.6962 - acc: 0.6245 - val_loss: 0.6286 - val_acc: 0.6555\n","Epoch 2/100\n","474/474 [==============================] - 0s 168us/step - loss: 0.6184 - acc: 0.7089 - val_loss: 0.5885 - val_acc: 0.6849\n","Epoch 3/100\n","474/474 [==============================] - 0s 177us/step - loss: 0.5627 - acc: 0.7342 - val_loss: 0.5641 - val_acc: 0.6933\n","Epoch 4/100\n","474/474 [==============================] - 0s 139us/step - loss: 0.5135 - acc: 0.7574 - val_loss: 0.5515 - val_acc: 0.7101\n","Epoch 5/100\n","474/474 [==============================] - 0s 156us/step - loss: 0.5112 - acc: 0.7743 - val_loss: 0.5410 - val_acc: 0.7479\n","Epoch 6/100\n","474/474 [==============================] - 0s 146us/step - loss: 0.5237 - acc: 0.7743 - val_loss: 0.5318 - val_acc: 0.7479\n","Epoch 7/100\n","474/474 [==============================] - 0s 156us/step - loss: 0.4618 - acc: 0.7975 - val_loss: 0.5240 - val_acc: 0.7521\n","Epoch 8/100\n","474/474 [==============================] - 0s 147us/step - loss: 0.4512 - acc: 0.7932 - val_loss: 0.5158 - val_acc: 0.7563\n","Epoch 9/100\n","474/474 [==============================] - 0s 149us/step - loss: 0.4673 - acc: 0.7722 - val_loss: 0.5104 - val_acc: 0.7647\n","Epoch 10/100\n","474/474 [==============================] - 0s 158us/step - loss: 0.4671 - acc: 0.8080 - val_loss: 0.5096 - val_acc: 0.7647\n","Epoch 11/100\n","474/474 [==============================] - 0s 157us/step - loss: 0.4467 - acc: 0.7975 - val_loss: 0.5082 - val_acc: 0.7605\n","Epoch 12/100\n","474/474 [==============================] - 0s 145us/step - loss: 0.4371 - acc: 0.8080 - val_loss: 0.5068 - val_acc: 0.7647\n","Epoch 13/100\n","474/474 [==============================] - 0s 149us/step - loss: 0.4282 - acc: 0.8122 - val_loss: 0.5060 - val_acc: 0.7647\n","Epoch 14/100\n","474/474 [==============================] - 0s 141us/step - loss: 0.4112 - acc: 0.8291 - val_loss: 0.5059 - val_acc: 0.7647\n","Epoch 15/100\n","474/474 [==============================] - 0s 136us/step - loss: 0.4267 - acc: 0.8038 - val_loss: 0.5048 - val_acc: 0.7689\n","Epoch 16/100\n","474/474 [==============================] - 0s 139us/step - loss: 0.4092 - acc: 0.8186 - val_loss: 0.5057 - val_acc: 0.7689\n","Epoch 17/100\n","474/474 [==============================] - 0s 169us/step - loss: 0.4115 - acc: 0.8270 - val_loss: 0.5026 - val_acc: 0.7689\n","Epoch 18/100\n","474/474 [==============================] - 0s 137us/step - loss: 0.4161 - acc: 0.8228 - val_loss: 0.5039 - val_acc: 0.7605\n","Epoch 19/100\n","474/474 [==============================] - 0s 146us/step - loss: 0.3943 - acc: 0.8354 - val_loss: 0.5062 - val_acc: 0.7605\n","Epoch 20/100\n","474/474 [==============================] - 0s 132us/step - loss: 0.3888 - acc: 0.8481 - val_loss: 0.5111 - val_acc: 0.7563\n","Epoch 21/100\n","474/474 [==============================] - 0s 145us/step - loss: 0.4102 - acc: 0.8397 - val_loss: 0.5090 - val_acc: 0.7563\n","Epoch 22/100\n","474/474 [==============================] - 0s 158us/step - loss: 0.3802 - acc: 0.8397 - val_loss: 0.5065 - val_acc: 0.7521\n","Epoch 23/100\n","474/474 [==============================] - 0s 140us/step - loss: 0.4022 - acc: 0.8270 - val_loss: 0.5082 - val_acc: 0.7563\n","Epoch 24/100\n","474/474 [==============================] - 0s 139us/step - loss: 0.3899 - acc: 0.8270 - val_loss: 0.5094 - val_acc: 0.7563\n","Epoch 25/100\n","474/474 [==============================] - 0s 140us/step - loss: 0.3727 - acc: 0.8397 - val_loss: 0.5093 - val_acc: 0.7521\n","Epoch 26/100\n","474/474 [==============================] - 0s 138us/step - loss: 0.3839 - acc: 0.8354 - val_loss: 0.5118 - val_acc: 0.7479\n","Epoch 27/100\n","474/474 [==============================] - 0s 140us/step - loss: 0.3913 - acc: 0.8228 - val_loss: 0.5127 - val_acc: 0.7563\n","Epoch 28/100\n","474/474 [==============================] - 0s 167us/step - loss: 0.3961 - acc: 0.8207 - val_loss: 0.5140 - val_acc: 0.7563\n","Epoch 29/100\n","474/474 [==============================] - 0s 162us/step - loss: 0.3829 - acc: 0.8312 - val_loss: 0.5199 - val_acc: 0.7563\n","Epoch 30/100\n","474/474 [==============================] - 0s 154us/step - loss: 0.3990 - acc: 0.8333 - val_loss: 0.5191 - val_acc: 0.7521\n","Epoch 31/100\n","474/474 [==============================] - 0s 170us/step - loss: 0.3894 - acc: 0.8397 - val_loss: 0.5179 - val_acc: 0.7689\n","Epoch 32/100\n","474/474 [==============================] - 0s 144us/step - loss: 0.3869 - acc: 0.8397 - val_loss: 0.5209 - val_acc: 0.7647\n","Epoch 33/100\n","474/474 [==============================] - 0s 173us/step - loss: 0.3797 - acc: 0.8460 - val_loss: 0.5205 - val_acc: 0.7647\n","Epoch 34/100\n","474/474 [==============================] - 0s 164us/step - loss: 0.3764 - acc: 0.8418 - val_loss: 0.5186 - val_acc: 0.7689\n","Epoch 35/100\n","474/474 [==============================] - 0s 144us/step - loss: 0.3681 - acc: 0.8460 - val_loss: 0.5201 - val_acc: 0.7521\n","Epoch 36/100\n","474/474 [==============================] - 0s 154us/step - loss: 0.3747 - acc: 0.8439 - val_loss: 0.5222 - val_acc: 0.7647\n","Epoch 37/100\n","474/474 [==============================] - 0s 142us/step - loss: 0.4037 - acc: 0.8418 - val_loss: 0.5238 - val_acc: 0.7689\n","Epoch 38/100\n","474/474 [==============================] - 0s 168us/step - loss: 0.3564 - acc: 0.8671 - val_loss: 0.5285 - val_acc: 0.7689\n","Epoch 39/100\n","474/474 [==============================] - 0s 148us/step - loss: 0.3820 - acc: 0.8460 - val_loss: 0.5335 - val_acc: 0.7479\n","Epoch 40/100\n","474/474 [==============================] - 0s 158us/step - loss: 0.3749 - acc: 0.8460 - val_loss: 0.5351 - val_acc: 0.7731\n","Epoch 41/100\n","474/474 [==============================] - 0s 146us/step - loss: 0.3590 - acc: 0.8586 - val_loss: 0.5328 - val_acc: 0.7689\n","Epoch 42/100\n","474/474 [==============================] - 0s 142us/step - loss: 0.3565 - acc: 0.8608 - val_loss: 0.5363 - val_acc: 0.7563\n","Epoch 43/100\n","474/474 [==============================] - 0s 165us/step - loss: 0.3681 - acc: 0.8418 - val_loss: 0.5366 - val_acc: 0.7647\n","Epoch 44/100\n","474/474 [==============================] - 0s 142us/step - loss: 0.3816 - acc: 0.8439 - val_loss: 0.5382 - val_acc: 0.7689\n","Epoch 45/100\n","474/474 [==============================] - 0s 152us/step - loss: 0.3622 - acc: 0.8671 - val_loss: 0.5405 - val_acc: 0.7647\n","Epoch 46/100\n","474/474 [==============================] - 0s 139us/step - loss: 0.3861 - acc: 0.8502 - val_loss: 0.5410 - val_acc: 0.7731\n","Epoch 47/100\n","474/474 [==============================] - 0s 138us/step - loss: 0.3542 - acc: 0.8608 - val_loss: 0.5402 - val_acc: 0.7689\n","Epoch 48/100\n","474/474 [==============================] - 0s 141us/step - loss: 0.3901 - acc: 0.8397 - val_loss: 0.5396 - val_acc: 0.7689\n","Epoch 49/100\n","474/474 [==============================] - 0s 142us/step - loss: 0.3645 - acc: 0.8439 - val_loss: 0.5354 - val_acc: 0.7773\n","Epoch 50/100\n","474/474 [==============================] - 0s 137us/step - loss: 0.3687 - acc: 0.8523 - val_loss: 0.5329 - val_acc: 0.7731\n","Epoch 51/100\n","474/474 [==============================] - 0s 137us/step - loss: 0.3696 - acc: 0.8439 - val_loss: 0.5371 - val_acc: 0.7647\n","Epoch 52/100\n","474/474 [==============================] - 0s 157us/step - loss: 0.3664 - acc: 0.8565 - val_loss: 0.5410 - val_acc: 0.7647\n","Epoch 53/100\n","474/474 [==============================] - 0s 147us/step - loss: 0.3713 - acc: 0.8502 - val_loss: 0.5440 - val_acc: 0.7647\n","Epoch 54/100\n","474/474 [==============================] - 0s 149us/step - loss: 0.3676 - acc: 0.8481 - val_loss: 0.5485 - val_acc: 0.7605\n","Epoch 55/100\n","474/474 [==============================] - 0s 161us/step - loss: 0.3762 - acc: 0.8312 - val_loss: 0.5466 - val_acc: 0.7647\n","Epoch 56/100\n","474/474 [==============================] - 0s 141us/step - loss: 0.3650 - acc: 0.8502 - val_loss: 0.5470 - val_acc: 0.7605\n","Epoch 57/100\n","474/474 [==============================] - 0s 147us/step - loss: 0.3701 - acc: 0.8439 - val_loss: 0.5479 - val_acc: 0.7605\n","Epoch 58/100\n","474/474 [==============================] - 0s 138us/step - loss: 0.3514 - acc: 0.8460 - val_loss: 0.5492 - val_acc: 0.7689\n","Epoch 59/100\n","474/474 [==============================] - 0s 143us/step - loss: 0.3513 - acc: 0.8460 - val_loss: 0.5478 - val_acc: 0.7605\n","Epoch 60/100\n","474/474 [==============================] - 0s 176us/step - loss: 0.3749 - acc: 0.8397 - val_loss: 0.5451 - val_acc: 0.7689\n","Epoch 61/100\n","474/474 [==============================] - 0s 160us/step - loss: 0.3796 - acc: 0.8397 - val_loss: 0.5507 - val_acc: 0.7605\n","Epoch 62/100\n","474/474 [==============================] - 0s 144us/step - loss: 0.3567 - acc: 0.8565 - val_loss: 0.5508 - val_acc: 0.7605\n","Epoch 63/100\n","474/474 [==============================] - 0s 144us/step - loss: 0.3473 - acc: 0.8439 - val_loss: 0.5507 - val_acc: 0.7689\n","Epoch 64/100\n","474/474 [==============================] - 0s 140us/step - loss: 0.3663 - acc: 0.8460 - val_loss: 0.5552 - val_acc: 0.7605\n","Epoch 65/100\n","474/474 [==============================] - 0s 134us/step - loss: 0.3597 - acc: 0.8439 - val_loss: 0.5580 - val_acc: 0.7605\n","Epoch 66/100\n","474/474 [==============================] - 0s 149us/step - loss: 0.3667 - acc: 0.8608 - val_loss: 0.5567 - val_acc: 0.7479\n","Epoch 67/100\n","474/474 [==============================] - 0s 174us/step - loss: 0.3468 - acc: 0.8565 - val_loss: 0.5571 - val_acc: 0.7521\n","Epoch 68/100\n","474/474 [==============================] - 0s 148us/step - loss: 0.3599 - acc: 0.8502 - val_loss: 0.5570 - val_acc: 0.7521\n","Epoch 69/100\n","474/474 [==============================] - 0s 137us/step - loss: 0.3459 - acc: 0.8523 - val_loss: 0.5598 - val_acc: 0.7605\n","Epoch 70/100\n","474/474 [==============================] - 0s 141us/step - loss: 0.3723 - acc: 0.8586 - val_loss: 0.5566 - val_acc: 0.7605\n","Epoch 71/100\n","474/474 [==============================] - 0s 146us/step - loss: 0.3491 - acc: 0.8544 - val_loss: 0.5541 - val_acc: 0.7647\n","Epoch 72/100\n","474/474 [==============================] - 0s 149us/step - loss: 0.3541 - acc: 0.8418 - val_loss: 0.5561 - val_acc: 0.7647\n","Epoch 73/100\n","474/474 [==============================] - 0s 140us/step - loss: 0.3444 - acc: 0.8608 - val_loss: 0.5597 - val_acc: 0.7731\n","Epoch 74/100\n","474/474 [==============================] - 0s 175us/step - loss: 0.3449 - acc: 0.8481 - val_loss: 0.5602 - val_acc: 0.7647\n","Epoch 75/100\n","474/474 [==============================] - 0s 141us/step - loss: 0.3669 - acc: 0.8460 - val_loss: 0.5618 - val_acc: 0.7563\n","Epoch 76/100\n","474/474 [==============================] - 0s 167us/step - loss: 0.3422 - acc: 0.8650 - val_loss: 0.5613 - val_acc: 0.7647\n","Epoch 77/100\n","474/474 [==============================] - 0s 158us/step - loss: 0.3668 - acc: 0.8544 - val_loss: 0.5631 - val_acc: 0.7605\n","Epoch 78/100\n","474/474 [==============================] - 0s 141us/step - loss: 0.3469 - acc: 0.8481 - val_loss: 0.5624 - val_acc: 0.7563\n","Epoch 79/100\n","474/474 [==============================] - 0s 140us/step - loss: 0.3579 - acc: 0.8650 - val_loss: 0.5591 - val_acc: 0.7773\n","Epoch 80/100\n","474/474 [==============================] - 0s 143us/step - loss: 0.3509 - acc: 0.8544 - val_loss: 0.5568 - val_acc: 0.7731\n","Epoch 81/100\n","474/474 [==============================] - 0s 167us/step - loss: 0.3543 - acc: 0.8481 - val_loss: 0.5588 - val_acc: 0.7731\n","Epoch 82/100\n","474/474 [==============================] - 0s 135us/step - loss: 0.3554 - acc: 0.8481 - val_loss: 0.5563 - val_acc: 0.7731\n","Epoch 83/100\n","474/474 [==============================] - 0s 160us/step - loss: 0.3624 - acc: 0.8439 - val_loss: 0.5614 - val_acc: 0.7689\n","Epoch 84/100\n","474/474 [==============================] - 0s 137us/step - loss: 0.3571 - acc: 0.8650 - val_loss: 0.5599 - val_acc: 0.7605\n","Epoch 85/100\n","474/474 [==============================] - 0s 144us/step - loss: 0.3309 - acc: 0.8544 - val_loss: 0.5621 - val_acc: 0.7647\n","Epoch 86/100\n","474/474 [==============================] - 0s 147us/step - loss: 0.3608 - acc: 0.8481 - val_loss: 0.5651 - val_acc: 0.7647\n","Epoch 87/100\n","474/474 [==============================] - 0s 143us/step - loss: 0.3489 - acc: 0.8629 - val_loss: 0.5648 - val_acc: 0.7647\n","Epoch 88/100\n","474/474 [==============================] - 0s 170us/step - loss: 0.3332 - acc: 0.8734 - val_loss: 0.5645 - val_acc: 0.7647\n","Epoch 89/100\n","474/474 [==============================] - 0s 139us/step - loss: 0.3701 - acc: 0.8439 - val_loss: 0.5697 - val_acc: 0.7605\n","Epoch 90/100\n","474/474 [==============================] - 0s 164us/step - loss: 0.3488 - acc: 0.8629 - val_loss: 0.5697 - val_acc: 0.7605\n","Epoch 91/100\n","474/474 [==============================] - 0s 145us/step - loss: 0.3377 - acc: 0.8586 - val_loss: 0.5701 - val_acc: 0.7605\n","Epoch 92/100\n","474/474 [==============================] - 0s 158us/step - loss: 0.3487 - acc: 0.8439 - val_loss: 0.5683 - val_acc: 0.7647\n","Epoch 93/100\n","474/474 [==============================] - 0s 139us/step - loss: 0.3338 - acc: 0.8650 - val_loss: 0.5692 - val_acc: 0.7731\n","Epoch 94/100\n","474/474 [==============================] - 0s 136us/step - loss: 0.3524 - acc: 0.8586 - val_loss: 0.5634 - val_acc: 0.7689\n","Epoch 95/100\n","474/474 [==============================] - 0s 146us/step - loss: 0.3462 - acc: 0.8460 - val_loss: 0.5629 - val_acc: 0.7605\n","Epoch 96/100\n","474/474 [==============================] - 0s 153us/step - loss: 0.3548 - acc: 0.8502 - val_loss: 0.5686 - val_acc: 0.7689\n","Epoch 97/100\n","474/474 [==============================] - 0s 146us/step - loss: 0.3524 - acc: 0.8650 - val_loss: 0.5681 - val_acc: 0.7647\n","Epoch 98/100\n","474/474 [==============================] - 0s 162us/step - loss: 0.3591 - acc: 0.8481 - val_loss: 0.5717 - val_acc: 0.7647\n","Epoch 99/100\n","474/474 [==============================] - 0s 147us/step - loss: 0.3425 - acc: 0.8523 - val_loss: 0.5672 - val_acc: 0.7731\n","Epoch 100/100\n","474/474 [==============================] - 0s 144us/step - loss: 0.3496 - acc: 0.8376 - val_loss: 0.5631 - val_acc: 0.7689\n","Train on 475 samples, validate on 237 samples\n","Epoch 1/100\n","475/475 [==============================] - 0s 167us/step - loss: 0.4910 - acc: 0.8000 - val_loss: 0.2970 - val_acc: 0.8776\n","Epoch 2/100\n","475/475 [==============================] - 0s 172us/step - loss: 0.4692 - acc: 0.8063 - val_loss: 0.3109 - val_acc: 0.8650\n","Epoch 3/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.4434 - acc: 0.8021 - val_loss: 0.3260 - val_acc: 0.8565\n","Epoch 4/100\n","475/475 [==============================] - 0s 137us/step - loss: 0.4439 - acc: 0.8147 - val_loss: 0.3365 - val_acc: 0.8439\n","Epoch 5/100\n","475/475 [==============================] - 0s 140us/step - loss: 0.4282 - acc: 0.8084 - val_loss: 0.3407 - val_acc: 0.8481\n","Epoch 6/100\n","475/475 [==============================] - 0s 155us/step - loss: 0.4367 - acc: 0.8189 - val_loss: 0.3444 - val_acc: 0.8523\n","Epoch 7/100\n","475/475 [==============================] - 0s 188us/step - loss: 0.4336 - acc: 0.8211 - val_loss: 0.3463 - val_acc: 0.8481\n","Epoch 8/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.4278 - acc: 0.8042 - val_loss: 0.3519 - val_acc: 0.8481\n","Epoch 9/100\n","475/475 [==============================] - 0s 143us/step - loss: 0.4248 - acc: 0.8084 - val_loss: 0.3590 - val_acc: 0.8270\n","Epoch 10/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.4375 - acc: 0.8084 - val_loss: 0.3611 - val_acc: 0.8228\n","Epoch 11/100\n","475/475 [==============================] - 0s 158us/step - loss: 0.3947 - acc: 0.8379 - val_loss: 0.3621 - val_acc: 0.8228\n","Epoch 12/100\n","475/475 [==============================] - 0s 166us/step - loss: 0.4172 - acc: 0.8168 - val_loss: 0.3612 - val_acc: 0.8228\n","Epoch 13/100\n","475/475 [==============================] - 0s 138us/step - loss: 0.4084 - acc: 0.8168 - val_loss: 0.3615 - val_acc: 0.8312\n","Epoch 14/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.4168 - acc: 0.8232 - val_loss: 0.3662 - val_acc: 0.8312\n","Epoch 15/100\n","475/475 [==============================] - 0s 163us/step - loss: 0.4138 - acc: 0.8084 - val_loss: 0.3704 - val_acc: 0.8270\n","Epoch 16/100\n","475/475 [==============================] - 0s 182us/step - loss: 0.4054 - acc: 0.8189 - val_loss: 0.3731 - val_acc: 0.8270\n","Epoch 17/100\n","475/475 [==============================] - 0s 161us/step - loss: 0.4345 - acc: 0.8126 - val_loss: 0.3825 - val_acc: 0.8228\n","Epoch 18/100\n","475/475 [==============================] - 0s 154us/step - loss: 0.3928 - acc: 0.8400 - val_loss: 0.3871 - val_acc: 0.8228\n","Epoch 19/100\n","475/475 [==============================] - 0s 143us/step - loss: 0.4023 - acc: 0.8358 - val_loss: 0.3849 - val_acc: 0.8270\n","Epoch 20/100\n","475/475 [==============================] - 0s 196us/step - loss: 0.3907 - acc: 0.8337 - val_loss: 0.3829 - val_acc: 0.8228\n","Epoch 21/100\n","475/475 [==============================] - 0s 143us/step - loss: 0.4085 - acc: 0.8168 - val_loss: 0.3856 - val_acc: 0.8270\n","Epoch 22/100\n","475/475 [==============================] - 0s 132us/step - loss: 0.4000 - acc: 0.8189 - val_loss: 0.3860 - val_acc: 0.8186\n","Epoch 23/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3954 - acc: 0.8295 - val_loss: 0.3860 - val_acc: 0.8143\n","Epoch 24/100\n","475/475 [==============================] - 0s 171us/step - loss: 0.3927 - acc: 0.8189 - val_loss: 0.3852 - val_acc: 0.8101\n","Epoch 25/100\n","475/475 [==============================] - 0s 166us/step - loss: 0.3950 - acc: 0.8295 - val_loss: 0.3864 - val_acc: 0.8101\n","Epoch 26/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.4048 - acc: 0.8232 - val_loss: 0.3911 - val_acc: 0.8101\n","Epoch 27/100\n","475/475 [==============================] - 0s 149us/step - loss: 0.3935 - acc: 0.8379 - val_loss: 0.3897 - val_acc: 0.8186\n","Epoch 28/100\n","475/475 [==============================] - 0s 147us/step - loss: 0.3956 - acc: 0.8211 - val_loss: 0.3968 - val_acc: 0.8186\n","Epoch 29/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3849 - acc: 0.8463 - val_loss: 0.3948 - val_acc: 0.8228\n","Epoch 30/100\n","475/475 [==============================] - 0s 172us/step - loss: 0.3972 - acc: 0.8316 - val_loss: 0.3970 - val_acc: 0.8186\n","Epoch 31/100\n","475/475 [==============================] - 0s 156us/step - loss: 0.3983 - acc: 0.8295 - val_loss: 0.3964 - val_acc: 0.8186\n","Epoch 32/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3932 - acc: 0.8274 - val_loss: 0.3975 - val_acc: 0.8228\n","Epoch 33/100\n","475/475 [==============================] - 0s 160us/step - loss: 0.3975 - acc: 0.8400 - val_loss: 0.3942 - val_acc: 0.8228\n","Epoch 34/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3979 - acc: 0.8211 - val_loss: 0.3965 - val_acc: 0.8186\n","Epoch 35/100\n","475/475 [==============================] - 0s 150us/step - loss: 0.3974 - acc: 0.8295 - val_loss: 0.4008 - val_acc: 0.8186\n","Epoch 36/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3824 - acc: 0.8316 - val_loss: 0.4022 - val_acc: 0.8186\n","Epoch 37/100\n","475/475 [==============================] - 0s 138us/step - loss: 0.4066 - acc: 0.8232 - val_loss: 0.4083 - val_acc: 0.8186\n","Epoch 38/100\n","475/475 [==============================] - 0s 132us/step - loss: 0.3897 - acc: 0.8337 - val_loss: 0.4032 - val_acc: 0.8228\n","Epoch 39/100\n","475/475 [==============================] - 0s 151us/step - loss: 0.3978 - acc: 0.8358 - val_loss: 0.4003 - val_acc: 0.8186\n","Epoch 40/100\n","475/475 [==============================] - 0s 134us/step - loss: 0.4084 - acc: 0.8232 - val_loss: 0.4053 - val_acc: 0.8186\n","Epoch 41/100\n","475/475 [==============================] - 0s 177us/step - loss: 0.3831 - acc: 0.8358 - val_loss: 0.4030 - val_acc: 0.8186\n","Epoch 42/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3854 - acc: 0.8253 - val_loss: 0.4067 - val_acc: 0.8143\n","Epoch 43/100\n","475/475 [==============================] - 0s 150us/step - loss: 0.3856 - acc: 0.8316 - val_loss: 0.4077 - val_acc: 0.8143\n","Epoch 44/100\n","475/475 [==============================] - 0s 180us/step - loss: 0.3852 - acc: 0.8295 - val_loss: 0.4105 - val_acc: 0.8186\n","Epoch 45/100\n","475/475 [==============================] - 0s 156us/step - loss: 0.3854 - acc: 0.8421 - val_loss: 0.4168 - val_acc: 0.8186\n","Epoch 46/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3730 - acc: 0.8316 - val_loss: 0.4201 - val_acc: 0.8017\n","Epoch 47/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3999 - acc: 0.8337 - val_loss: 0.4168 - val_acc: 0.8059\n","Epoch 48/100\n","475/475 [==============================] - 0s 140us/step - loss: 0.4133 - acc: 0.8168 - val_loss: 0.4154 - val_acc: 0.8059\n","Epoch 49/100\n","475/475 [==============================] - 0s 136us/step - loss: 0.4003 - acc: 0.8316 - val_loss: 0.4099 - val_acc: 0.8143\n","Epoch 50/100\n","475/475 [==============================] - 0s 148us/step - loss: 0.4047 - acc: 0.8253 - val_loss: 0.4095 - val_acc: 0.8143\n","Epoch 51/100\n","475/475 [==============================] - 0s 143us/step - loss: 0.3782 - acc: 0.8379 - val_loss: 0.4125 - val_acc: 0.8101\n","Epoch 52/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3676 - acc: 0.8316 - val_loss: 0.4156 - val_acc: 0.8101\n","Epoch 53/100\n","475/475 [==============================] - 0s 165us/step - loss: 0.3752 - acc: 0.8337 - val_loss: 0.4184 - val_acc: 0.8101\n","Epoch 54/100\n","475/475 [==============================] - 0s 167us/step - loss: 0.3801 - acc: 0.8295 - val_loss: 0.4224 - val_acc: 0.8101\n","Epoch 55/100\n","475/475 [==============================] - 0s 167us/step - loss: 0.3980 - acc: 0.8505 - val_loss: 0.4232 - val_acc: 0.8101\n","Epoch 56/100\n","475/475 [==============================] - 0s 190us/step - loss: 0.3818 - acc: 0.8463 - val_loss: 0.4174 - val_acc: 0.8101\n","Epoch 57/100\n","475/475 [==============================] - 0s 172us/step - loss: 0.3793 - acc: 0.8337 - val_loss: 0.4180 - val_acc: 0.8143\n","Epoch 58/100\n","475/475 [==============================] - 0s 197us/step - loss: 0.3854 - acc: 0.8295 - val_loss: 0.4224 - val_acc: 0.8143\n","Epoch 59/100\n","475/475 [==============================] - 0s 165us/step - loss: 0.3719 - acc: 0.8379 - val_loss: 0.4230 - val_acc: 0.8143\n","Epoch 60/100\n","475/475 [==============================] - 0s 161us/step - loss: 0.3856 - acc: 0.8358 - val_loss: 0.4214 - val_acc: 0.8101\n","Epoch 61/100\n","475/475 [==============================] - 0s 130us/step - loss: 0.3816 - acc: 0.8316 - val_loss: 0.4181 - val_acc: 0.8059\n","Epoch 62/100\n","475/475 [==============================] - 0s 166us/step - loss: 0.3729 - acc: 0.8337 - val_loss: 0.4206 - val_acc: 0.8101\n","Epoch 63/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3849 - acc: 0.8358 - val_loss: 0.4296 - val_acc: 0.8143\n","Epoch 64/100\n","475/475 [==============================] - 0s 175us/step - loss: 0.3691 - acc: 0.8379 - val_loss: 0.4333 - val_acc: 0.8186\n","Epoch 65/100\n","475/475 [==============================] - 0s 148us/step - loss: 0.3831 - acc: 0.8400 - val_loss: 0.4364 - val_acc: 0.8143\n","Epoch 66/100\n","475/475 [==============================] - 0s 164us/step - loss: 0.3829 - acc: 0.8274 - val_loss: 0.4283 - val_acc: 0.8143\n","Epoch 67/100\n","475/475 [==============================] - 0s 148us/step - loss: 0.3760 - acc: 0.8400 - val_loss: 0.4254 - val_acc: 0.8101\n","Epoch 68/100\n","475/475 [==============================] - 0s 138us/step - loss: 0.3823 - acc: 0.8526 - val_loss: 0.4280 - val_acc: 0.8186\n","Epoch 69/100\n","475/475 [==============================] - 0s 158us/step - loss: 0.3803 - acc: 0.8232 - val_loss: 0.4350 - val_acc: 0.8186\n","Epoch 70/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3590 - acc: 0.8421 - val_loss: 0.4361 - val_acc: 0.8143\n","Epoch 71/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3572 - acc: 0.8442 - val_loss: 0.4323 - val_acc: 0.8186\n","Epoch 72/100\n","475/475 [==============================] - 0s 168us/step - loss: 0.3723 - acc: 0.8379 - val_loss: 0.4365 - val_acc: 0.8186\n","Epoch 73/100\n","475/475 [==============================] - 0s 133us/step - loss: 0.3678 - acc: 0.8358 - val_loss: 0.4349 - val_acc: 0.8143\n","Epoch 74/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3708 - acc: 0.8463 - val_loss: 0.4377 - val_acc: 0.8186\n","Epoch 75/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3784 - acc: 0.8211 - val_loss: 0.4387 - val_acc: 0.8143\n","Epoch 76/100\n","475/475 [==============================] - 0s 140us/step - loss: 0.3828 - acc: 0.8295 - val_loss: 0.4330 - val_acc: 0.8059\n","Epoch 77/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3708 - acc: 0.8463 - val_loss: 0.4351 - val_acc: 0.8143\n","Epoch 78/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3676 - acc: 0.8400 - val_loss: 0.4334 - val_acc: 0.8143\n","Epoch 79/100\n","475/475 [==============================] - 0s 134us/step - loss: 0.3674 - acc: 0.8400 - val_loss: 0.4345 - val_acc: 0.8143\n","Epoch 80/100\n","475/475 [==============================] - 0s 140us/step - loss: 0.3648 - acc: 0.8463 - val_loss: 0.4381 - val_acc: 0.8228\n","Epoch 81/100\n","475/475 [==============================] - 0s 152us/step - loss: 0.3925 - acc: 0.8484 - val_loss: 0.4358 - val_acc: 0.8186\n","Epoch 82/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3737 - acc: 0.8484 - val_loss: 0.4385 - val_acc: 0.8143\n","Epoch 83/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3860 - acc: 0.8316 - val_loss: 0.4416 - val_acc: 0.8186\n","Epoch 84/100\n","475/475 [==============================] - 0s 151us/step - loss: 0.3691 - acc: 0.8526 - val_loss: 0.4479 - val_acc: 0.8143\n","Epoch 85/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3753 - acc: 0.8421 - val_loss: 0.4524 - val_acc: 0.8101\n","Epoch 86/100\n","475/475 [==============================] - 0s 164us/step - loss: 0.3673 - acc: 0.8421 - val_loss: 0.4470 - val_acc: 0.8101\n","Epoch 87/100\n","475/475 [==============================] - 0s 158us/step - loss: 0.3648 - acc: 0.8484 - val_loss: 0.4424 - val_acc: 0.8143\n","Epoch 88/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3753 - acc: 0.8442 - val_loss: 0.4431 - val_acc: 0.8186\n","Epoch 89/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3644 - acc: 0.8442 - val_loss: 0.4402 - val_acc: 0.8186\n","Epoch 90/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3705 - acc: 0.8295 - val_loss: 0.4420 - val_acc: 0.8143\n","Epoch 91/100\n","475/475 [==============================] - 0s 135us/step - loss: 0.3657 - acc: 0.8463 - val_loss: 0.4435 - val_acc: 0.8143\n","Epoch 92/100\n","475/475 [==============================] - 0s 154us/step - loss: 0.3790 - acc: 0.8295 - val_loss: 0.4416 - val_acc: 0.8143\n","Epoch 93/100\n","475/475 [==============================] - 0s 160us/step - loss: 0.3806 - acc: 0.8274 - val_loss: 0.4453 - val_acc: 0.8186\n","Epoch 94/100\n","475/475 [==============================] - 0s 138us/step - loss: 0.3697 - acc: 0.8295 - val_loss: 0.4377 - val_acc: 0.8228\n","Epoch 95/100\n","475/475 [==============================] - 0s 158us/step - loss: 0.3715 - acc: 0.8484 - val_loss: 0.4395 - val_acc: 0.8228\n","Epoch 96/100\n","475/475 [==============================] - 0s 163us/step - loss: 0.3701 - acc: 0.8505 - val_loss: 0.4469 - val_acc: 0.8186\n","Epoch 97/100\n","475/475 [==============================] - 0s 153us/step - loss: 0.3775 - acc: 0.8358 - val_loss: 0.4486 - val_acc: 0.8186\n","Epoch 98/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3631 - acc: 0.8442 - val_loss: 0.4535 - val_acc: 0.8143\n","Epoch 99/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3762 - acc: 0.8337 - val_loss: 0.4598 - val_acc: 0.8143\n","Epoch 100/100\n","475/475 [==============================] - 0s 177us/step - loss: 0.3679 - acc: 0.8316 - val_loss: 0.4561 - val_acc: 0.8143\n","Train on 475 samples, validate on 237 samples\n","Epoch 1/100\n","475/475 [==============================] - 0s 164us/step - loss: 0.4180 - acc: 0.8232 - val_loss: 0.3369 - val_acc: 0.8692\n","Epoch 2/100\n","475/475 [==============================] - 0s 167us/step - loss: 0.4111 - acc: 0.8421 - val_loss: 0.3457 - val_acc: 0.8650\n","Epoch 3/100\n","475/475 [==============================] - 0s 135us/step - loss: 0.4077 - acc: 0.8232 - val_loss: 0.3540 - val_acc: 0.8608\n","Epoch 4/100\n","475/475 [==============================] - 0s 133us/step - loss: 0.3979 - acc: 0.8189 - val_loss: 0.3582 - val_acc: 0.8608\n","Epoch 5/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3863 - acc: 0.8168 - val_loss: 0.3638 - val_acc: 0.8608\n","Epoch 6/100\n","475/475 [==============================] - 0s 150us/step - loss: 0.3775 - acc: 0.8358 - val_loss: 0.3652 - val_acc: 0.8608\n","Epoch 7/100\n","475/475 [==============================] - 0s 138us/step - loss: 0.3819 - acc: 0.8316 - val_loss: 0.3672 - val_acc: 0.8608\n","Epoch 8/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3860 - acc: 0.8295 - val_loss: 0.3689 - val_acc: 0.8608\n","Epoch 9/100\n","475/475 [==============================] - 0s 136us/step - loss: 0.3816 - acc: 0.8316 - val_loss: 0.3733 - val_acc: 0.8523\n","Epoch 10/100\n","475/475 [==============================] - 0s 165us/step - loss: 0.3855 - acc: 0.8400 - val_loss: 0.3774 - val_acc: 0.8523\n","Epoch 11/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3797 - acc: 0.8232 - val_loss: 0.3853 - val_acc: 0.8523\n","Epoch 12/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3666 - acc: 0.8442 - val_loss: 0.3852 - val_acc: 0.8523\n","Epoch 13/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3817 - acc: 0.8400 - val_loss: 0.3843 - val_acc: 0.8523\n","Epoch 14/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3798 - acc: 0.8379 - val_loss: 0.3832 - val_acc: 0.8523\n","Epoch 15/100\n","475/475 [==============================] - 0s 175us/step - loss: 0.3837 - acc: 0.8274 - val_loss: 0.3824 - val_acc: 0.8523\n","Epoch 16/100\n","475/475 [==============================] - 0s 172us/step - loss: 0.3656 - acc: 0.8421 - val_loss: 0.3809 - val_acc: 0.8523\n","Epoch 17/100\n","475/475 [==============================] - 0s 131us/step - loss: 0.3654 - acc: 0.8379 - val_loss: 0.3799 - val_acc: 0.8523\n","Epoch 18/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3792 - acc: 0.8316 - val_loss: 0.3831 - val_acc: 0.8523\n","Epoch 19/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3922 - acc: 0.8232 - val_loss: 0.3870 - val_acc: 0.8481\n","Epoch 20/100\n","475/475 [==============================] - 0s 165us/step - loss: 0.3928 - acc: 0.8211 - val_loss: 0.3857 - val_acc: 0.8439\n","Epoch 21/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3692 - acc: 0.8337 - val_loss: 0.3871 - val_acc: 0.8439\n","Epoch 22/100\n","475/475 [==============================] - 0s 134us/step - loss: 0.3666 - acc: 0.8400 - val_loss: 0.3843 - val_acc: 0.8439\n","Epoch 23/100\n","475/475 [==============================] - 0s 160us/step - loss: 0.3613 - acc: 0.8274 - val_loss: 0.3823 - val_acc: 0.8439\n","Epoch 24/100\n","475/475 [==============================] - 0s 147us/step - loss: 0.3702 - acc: 0.8400 - val_loss: 0.3825 - val_acc: 0.8439\n","Epoch 25/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3735 - acc: 0.8379 - val_loss: 0.3836 - val_acc: 0.8439\n","Epoch 26/100\n","475/475 [==============================] - 0s 171us/step - loss: 0.3695 - acc: 0.8274 - val_loss: 0.3857 - val_acc: 0.8481\n","Epoch 27/100\n","475/475 [==============================] - 0s 156us/step - loss: 0.3589 - acc: 0.8358 - val_loss: 0.3825 - val_acc: 0.8523\n","Epoch 28/100\n","475/475 [==============================] - 0s 156us/step - loss: 0.3784 - acc: 0.8358 - val_loss: 0.3838 - val_acc: 0.8523\n","Epoch 29/100\n","475/475 [==============================] - 0s 156us/step - loss: 0.3770 - acc: 0.8232 - val_loss: 0.3926 - val_acc: 0.8439\n","Epoch 30/100\n","475/475 [==============================] - 0s 155us/step - loss: 0.3740 - acc: 0.8337 - val_loss: 0.3933 - val_acc: 0.8397\n","Epoch 31/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3687 - acc: 0.8379 - val_loss: 0.3903 - val_acc: 0.8397\n","Epoch 32/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3715 - acc: 0.8274 - val_loss: 0.3903 - val_acc: 0.8397\n","Epoch 33/100\n","475/475 [==============================] - 0s 138us/step - loss: 0.3570 - acc: 0.8400 - val_loss: 0.3916 - val_acc: 0.8397\n","Epoch 34/100\n","475/475 [==============================] - 0s 137us/step - loss: 0.3673 - acc: 0.8232 - val_loss: 0.3934 - val_acc: 0.8397\n","Epoch 35/100\n","475/475 [==============================] - 0s 163us/step - loss: 0.3710 - acc: 0.8316 - val_loss: 0.3896 - val_acc: 0.8397\n","Epoch 36/100\n","475/475 [==============================] - 0s 134us/step - loss: 0.3659 - acc: 0.8316 - val_loss: 0.3928 - val_acc: 0.8354\n","Epoch 37/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3642 - acc: 0.8400 - val_loss: 0.3933 - val_acc: 0.8354\n","Epoch 38/100\n","475/475 [==============================] - 0s 150us/step - loss: 0.3558 - acc: 0.8400 - val_loss: 0.3905 - val_acc: 0.8354\n","Epoch 39/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3633 - acc: 0.8358 - val_loss: 0.3891 - val_acc: 0.8439\n","Epoch 40/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3698 - acc: 0.8316 - val_loss: 0.3894 - val_acc: 0.8439\n","Epoch 41/100\n","475/475 [==============================] - 0s 150us/step - loss: 0.3728 - acc: 0.8421 - val_loss: 0.3916 - val_acc: 0.8354\n","Epoch 42/100\n","475/475 [==============================] - 0s 137us/step - loss: 0.3668 - acc: 0.8505 - val_loss: 0.3940 - val_acc: 0.8354\n","Epoch 43/100\n","475/475 [==============================] - 0s 190us/step - loss: 0.3557 - acc: 0.8442 - val_loss: 0.3923 - val_acc: 0.8354\n","Epoch 44/100\n","475/475 [==============================] - 0s 152us/step - loss: 0.3589 - acc: 0.8379 - val_loss: 0.3920 - val_acc: 0.8354\n","Epoch 45/100\n","475/475 [==============================] - 0s 161us/step - loss: 0.3592 - acc: 0.8337 - val_loss: 0.3924 - val_acc: 0.8354\n","Epoch 46/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3609 - acc: 0.8358 - val_loss: 0.3939 - val_acc: 0.8397\n","Epoch 47/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3699 - acc: 0.8358 - val_loss: 0.3946 - val_acc: 0.8439\n","Epoch 48/100\n","475/475 [==============================] - 0s 134us/step - loss: 0.3630 - acc: 0.8337 - val_loss: 0.3989 - val_acc: 0.8397\n","Epoch 49/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3498 - acc: 0.8421 - val_loss: 0.3999 - val_acc: 0.8397\n","Epoch 50/100\n","475/475 [==============================] - 0s 164us/step - loss: 0.3468 - acc: 0.8463 - val_loss: 0.3959 - val_acc: 0.8397\n","Epoch 51/100\n","475/475 [==============================] - 0s 147us/step - loss: 0.3452 - acc: 0.8379 - val_loss: 0.3989 - val_acc: 0.8354\n","Epoch 52/100\n","475/475 [==============================] - 0s 148us/step - loss: 0.3668 - acc: 0.8442 - val_loss: 0.4010 - val_acc: 0.8397\n","Epoch 53/100\n","475/475 [==============================] - 0s 159us/step - loss: 0.3675 - acc: 0.8358 - val_loss: 0.4002 - val_acc: 0.8354\n","Epoch 54/100\n","475/475 [==============================] - 0s 162us/step - loss: 0.3742 - acc: 0.8253 - val_loss: 0.4009 - val_acc: 0.8397\n","Epoch 55/100\n","475/475 [==============================] - 0s 149us/step - loss: 0.3636 - acc: 0.8379 - val_loss: 0.4007 - val_acc: 0.8397\n","Epoch 56/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3632 - acc: 0.8358 - val_loss: 0.4036 - val_acc: 0.8354\n","Epoch 57/100\n","475/475 [==============================] - 0s 169us/step - loss: 0.3653 - acc: 0.8274 - val_loss: 0.4053 - val_acc: 0.8312\n","Epoch 58/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3535 - acc: 0.8463 - val_loss: 0.4073 - val_acc: 0.8354\n","Epoch 59/100\n","475/475 [==============================] - 0s 135us/step - loss: 0.3866 - acc: 0.8442 - val_loss: 0.4107 - val_acc: 0.8354\n","Epoch 60/100\n","475/475 [==============================] - 0s 154us/step - loss: 0.3550 - acc: 0.8442 - val_loss: 0.4126 - val_acc: 0.8397\n","Epoch 61/100\n","475/475 [==============================] - 0s 155us/step - loss: 0.3632 - acc: 0.8295 - val_loss: 0.4141 - val_acc: 0.8312\n","Epoch 62/100\n","475/475 [==============================] - 0s 143us/step - loss: 0.3529 - acc: 0.8505 - val_loss: 0.4173 - val_acc: 0.8270\n","Epoch 63/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3379 - acc: 0.8484 - val_loss: 0.4149 - val_acc: 0.8312\n","Epoch 64/100\n","475/475 [==============================] - 0s 167us/step - loss: 0.3709 - acc: 0.8316 - val_loss: 0.4159 - val_acc: 0.8354\n","Epoch 65/100\n","475/475 [==============================] - 0s 165us/step - loss: 0.3601 - acc: 0.8442 - val_loss: 0.4134 - val_acc: 0.8354\n","Epoch 66/100\n","475/475 [==============================] - 0s 165us/step - loss: 0.3515 - acc: 0.8526 - val_loss: 0.4174 - val_acc: 0.8312\n","Epoch 67/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3657 - acc: 0.8337 - val_loss: 0.4148 - val_acc: 0.8354\n","Epoch 68/100\n","475/475 [==============================] - 0s 142us/step - loss: 0.3522 - acc: 0.8316 - val_loss: 0.4132 - val_acc: 0.8312\n","Epoch 69/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3587 - acc: 0.8442 - val_loss: 0.4184 - val_acc: 0.8312\n","Epoch 70/100\n","475/475 [==============================] - 0s 161us/step - loss: 0.3459 - acc: 0.8611 - val_loss: 0.4201 - val_acc: 0.8312\n","Epoch 71/100\n","475/475 [==============================] - 0s 177us/step - loss: 0.3647 - acc: 0.8337 - val_loss: 0.4208 - val_acc: 0.8312\n","Epoch 72/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3546 - acc: 0.8526 - val_loss: 0.4244 - val_acc: 0.8312\n","Epoch 73/100\n","475/475 [==============================] - 0s 136us/step - loss: 0.3586 - acc: 0.8442 - val_loss: 0.4218 - val_acc: 0.8354\n","Epoch 74/100\n","475/475 [==============================] - 0s 157us/step - loss: 0.3520 - acc: 0.8463 - val_loss: 0.4256 - val_acc: 0.8312\n","Epoch 75/100\n","475/475 [==============================] - 0s 139us/step - loss: 0.3599 - acc: 0.8358 - val_loss: 0.4304 - val_acc: 0.8270\n","Epoch 76/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3669 - acc: 0.8295 - val_loss: 0.4346 - val_acc: 0.8312\n","Epoch 77/100\n","475/475 [==============================] - 0s 137us/step - loss: 0.3604 - acc: 0.8337 - val_loss: 0.4329 - val_acc: 0.8270\n","Epoch 78/100\n","475/475 [==============================] - 0s 151us/step - loss: 0.3619 - acc: 0.8442 - val_loss: 0.4402 - val_acc: 0.8270\n","Epoch 79/100\n","475/475 [==============================] - 0s 134us/step - loss: 0.3696 - acc: 0.8316 - val_loss: 0.4420 - val_acc: 0.8270\n","Epoch 80/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3533 - acc: 0.8421 - val_loss: 0.4445 - val_acc: 0.8270\n","Epoch 81/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3496 - acc: 0.8547 - val_loss: 0.4384 - val_acc: 0.8228\n","Epoch 82/100\n","475/475 [==============================] - 0s 141us/step - loss: 0.3691 - acc: 0.8379 - val_loss: 0.4322 - val_acc: 0.8270\n","Epoch 83/100\n","475/475 [==============================] - 0s 137us/step - loss: 0.3697 - acc: 0.8379 - val_loss: 0.4308 - val_acc: 0.8270\n","Epoch 84/100\n","475/475 [==============================] - 0s 162us/step - loss: 0.3563 - acc: 0.8379 - val_loss: 0.4208 - val_acc: 0.8312\n","Epoch 85/100\n","475/475 [==============================] - 0s 176us/step - loss: 0.3576 - acc: 0.8442 - val_loss: 0.4195 - val_acc: 0.8312\n","Epoch 86/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3486 - acc: 0.8526 - val_loss: 0.4183 - val_acc: 0.8312\n","Epoch 87/100\n","475/475 [==============================] - 0s 147us/step - loss: 0.3639 - acc: 0.8442 - val_loss: 0.4247 - val_acc: 0.8270\n","Epoch 88/100\n","475/475 [==============================] - 0s 146us/step - loss: 0.3602 - acc: 0.8379 - val_loss: 0.4305 - val_acc: 0.8312\n","Epoch 89/100\n","475/475 [==============================] - 0s 140us/step - loss: 0.3525 - acc: 0.8379 - val_loss: 0.4396 - val_acc: 0.8270\n","Epoch 90/100\n","475/475 [==============================] - 0s 147us/step - loss: 0.3390 - acc: 0.8442 - val_loss: 0.4422 - val_acc: 0.8270\n","Epoch 91/100\n","475/475 [==============================] - 0s 144us/step - loss: 0.3686 - acc: 0.8442 - val_loss: 0.4406 - val_acc: 0.8270\n","Epoch 92/100\n","475/475 [==============================] - 0s 178us/step - loss: 0.3653 - acc: 0.8421 - val_loss: 0.4407 - val_acc: 0.8312\n","Epoch 93/100\n","475/475 [==============================] - 0s 162us/step - loss: 0.3530 - acc: 0.8358 - val_loss: 0.4321 - val_acc: 0.8312\n","Epoch 94/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3538 - acc: 0.8337 - val_loss: 0.4278 - val_acc: 0.8312\n","Epoch 95/100\n","475/475 [==============================] - 0s 166us/step - loss: 0.3431 - acc: 0.8568 - val_loss: 0.4280 - val_acc: 0.8312\n","Epoch 96/100\n","475/475 [==============================] - 0s 145us/step - loss: 0.3504 - acc: 0.8463 - val_loss: 0.4258 - val_acc: 0.8270\n","Epoch 97/100\n","475/475 [==============================] - 0s 168us/step - loss: 0.3711 - acc: 0.8442 - val_loss: 0.4324 - val_acc: 0.8312\n","Epoch 98/100\n","475/475 [==============================] - 0s 169us/step - loss: 0.3627 - acc: 0.8463 - val_loss: 0.4272 - val_acc: 0.8270\n","Epoch 99/100\n","475/475 [==============================] - 0s 191us/step - loss: 0.3504 - acc: 0.8505 - val_loss: 0.4269 - val_acc: 0.8312\n","Epoch 100/100\n","475/475 [==============================] - 0s 156us/step - loss: 0.3643 - acc: 0.8442 - val_loss: 0.4287 - val_acc: 0.8270\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kOaBANRTislS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":139},"outputId":"e166a746-994d-414c-ea28-91256f3d9022","executionInfo":{"status":"ok","timestamp":1582175977936,"user_tz":-540,"elapsed":2123,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}}},"source":["# base predicts\n","model_LogisticRegression.fit(x_train,t_train)\n","model_SVC.fit(x_train,t_train)\n","model_LinearSVC.fit(x_train,t_train)\n","model_RandomForestClassifier.fit(x_train,t_train)\n","model_KNeighbors.fit(x_train,t_train)\n","model_DecisionTree.fit(x_train,t_train)\n","model_RandomForestClassifier.fit(x_train,t_train)\n","model_MLPClassifier.fit(x_train,t_train)\n","model_GradientBoostingClassifier.fit(x_train,t_train)\n","model_XGBClassifer.fit(x_train,t_train)\n","\n","base_pred_1 = model_LogisticRegression.predict(x_train)\n","base_pred_2 = model_SVC.predict(x_train)\n","base_pred_3 = model_LinearSVC.predict(x_train)\n","base_pred_4 = np.round(model_nn.predict(x_train))\n","base_pred_5 = model_RandomForestClassifier.predict(x_train)\n","base_pred_6 = model_KNeighbors.predict(x_train)\n","base_pred_7 = model_DecisionTree.predict(x_train)\n","base_pred_8 = model_RandomForestClassifier.predict(x_train)\n","base_pred_9 = model_MLPClassifier.predict(x_train)\n","base_pred_10 = model_GradientBoostingClassifier.predict(x_train)\n","base_pred_11 = model_XGBClassifer.predict(x_train)"],"execution_count":61,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:470: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"bIQ6R4tvise2","colab_type":"code","outputId":"f68c0097-b3be-4117-b5be-35893605d5dd","executionInfo":{"status":"ok","timestamp":1582176231375,"user_tz":-540,"elapsed":1681,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# stack base predicts for training meta model\n","stacked_predictions = np.column_stack((base_pred_1, base_pred_2, base_pred_3,base_pred_4,base_pred_5,base_pred_6,base_pred_7,base_pred_8,base_pred_9,base_pred_10,base_pred_11))\n","df_stack = pd.DataFrame(stacked_predictions)\n","df_stack.head()"],"execution_count":79,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     0    1    2    3    4    5    6    7    8    9   10\n","0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","1  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0\n","2  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0\n","3  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0\n","4  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0"]},"metadata":{"tags":[]},"execution_count":79}]},{"cell_type":"code","metadata":{"id":"I7VmeH9qisX6","colab_type":"code","outputId":"c61cd9f6-7de7-40ad-b670-5f7b94853bb5","executionInfo":{"status":"ok","timestamp":1582176234343,"user_tz":-540,"elapsed":2218,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["from scipy.optimize import minimize\n","from sklearn.metrics import mean_squared_error,recall_score,f1_score\n","for i in range(df_stack.shape[1]):\n","  print(mean_squared_error(t_train,df_stack.iloc[:, i]))"],"execution_count":80,"outputs":[{"output_type":"stream","text":["0.21212121212121213\n","0.14590347923681257\n","0.20650953984287318\n","0.16161616161616163\n","0.143658810325477\n","0.1717171717171717\n","0.1425364758698092\n","0.143658810325477\n","0.1425364758698092\n","0.16610549943883277\n","0.1537598204264871\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ypxxSfFjisTt","colab_type":"code","colab":{}},"source":["predictions = []\n","lls = []\n","wghts = []\n","def mse_func(weights):\n","    ''' scipy minimize will pass the weights as a numpy array '''\n","    final_prediction = 0\n","    for weight, prediction in zip(weights, predictions):\n","            final_prediction += weight*prediction\n","\n","    return mean_squared_error(t_train, final_prediction)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m64SGOvki1jy","colab_type":"code","colab":{}},"source":["for i in range(df_stack.shape[1]):\n","    predictions.append(np.array(df_stack.iloc[:, i]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V5Trj6HEi1d8","colab_type":"code","colab":{}},"source":["# Optimization runs 100 times.\n","for i in range(100):\n","    starting_values = np.random.uniform(size=df_stack.shape[1])\n","    # cons are given as constraints.\n","    cons = ({'type':'eq','fun':lambda w: 1-sum(w)})\n","    bounds = [(0,1)]*len(predictions)\n","    \n","    res = minimize(mse_func, starting_values, constraints=cons,\n","                   bounds = bounds, method='SLSQP')\n","\n","    lls.append(res['fun'])\n","    wghts.append(res['x'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rQvsISCGi1Zu","colab_type":"code","outputId":"9c17e1c5-f85c-4e32-df5e-98dce5ee5004","executionInfo":{"status":"ok","timestamp":1582176248071,"user_tz":-540,"elapsed":696,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print('MSE: {:.7f}'.format(mean_squared_error(t_train, np.sum(res.x * df_stack, axis=1))))"],"execution_count":84,"outputs":[{"output_type":"stream","text":["MSE: 0.1247992\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yPU0lSNni6J2","colab_type":"code","colab":{}},"source":["test_pred_1 = model_LogisticRegression.predict(x_test).astype(np.int64)\n","test_pred_2 = model_SVC.predict(x_test).astype(np.int64)\n","test_pred_3 = model_LinearSVC.predict(x_test).astype(np.int64)\n","test_pred_4 = np.round(model_nn.predict(x_test)).astype(np.int64)\n","test_pred_5 = model_RandomForestClassifier.predict(x_test).astype(np.int64)\n","test_pred_6 = model_KNeighbors.predict(x_test).astype(np.int64)\n","test_pred_7 = model_DecisionTree.predict(x_test).astype(np.int64)\n","test_pred_8 = model_RandomForestClassifier.predict(x_test).astype(np.int64)\n","test_pred_9 = model_MLPClassifier.predict(x_test).astype(np.int64)\n","test_pred_10 = model_GradientBoostingClassifier.predict(x_test).astype(np.int64)\n","test_pred_11 = model_XGBClassifer.predict(x_test).astype(np.int64)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"E8Kz5qJzi6A_","colab_type":"code","outputId":"dd070aa7-bc51-4604-836c-94aaf78a6c76","executionInfo":{"status":"ok","timestamp":1582176539059,"user_tz":-540,"elapsed":1735,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":224}},"source":["df_test_preds=pd.DataFrame(passengerId_data,columns=[\"PassengerId\"])\n","df_test_preds[\"pred_1\"] = test_pred_1\n","df_test_preds[\"pred_2\"] = test_pred_2\n","df_test_preds[\"pred_3\"] = test_pred_3\n","df_test_preds[\"pred_4\"] = test_pred_4\n","df_test_preds[\"pred_5\"] = test_pred_5\n","df_test_preds[\"pred_6\"] = test_pred_6\n","df_test_preds[\"pred_7\"] = test_pred_7\n","df_test_preds[\"pred_8\"] = test_pred_8\n","df_test_preds[\"pred_9\"] = test_pred_9\n","df_test_preds[\"pred_10\"] = test_pred_10\n","df_test_preds[\"pred_11\"] = test_pred_11\n","df_test_preds.drop('PassengerId', axis=1, inplace=True)\n","df_test_preds.head()"],"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pred_1</th>\n","      <th>pred_2</th>\n","      <th>pred_3</th>\n","      <th>pred_4</th>\n","      <th>pred_5</th>\n","      <th>pred_6</th>\n","      <th>pred_7</th>\n","      <th>pred_8</th>\n","      <th>pred_9</th>\n","      <th>pred_10</th>\n","      <th>pred_11</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   pred_1  pred_2  pred_3  pred_4  ...  pred_8  pred_9  pred_10  pred_11\n","0       0       0       0       0  ...       0       0        0        0\n","1       1       1       1       1  ...       1       0        1        1\n","2       0       0       0       0  ...       0       0        0        0\n","3       0       0       0       0  ...       0       0        0        0\n","4       1       1       1       1  ...       1       1        1        1\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"code","metadata":{"id":"tQFJWRV1i1Vs","colab_type":"code","outputId":"d147ead8-4d13-4143-82a1-65d5645df4ca","executionInfo":{"status":"ok","timestamp":1582176563348,"user_tz":-540,"elapsed":1713,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["y_test=np.round(np.sum(res.x * df_test_preds, axis=1))\n","submit_df=pd.DataFrame(passengerId_data.T,columns=[\"PassengerId\"])\n","submit_df[\"Survived\"]=y_test\n","submit_df.head()"],"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived\n","0          892       0.0\n","1          893       1.0\n","2          894       0.0\n","3          895       0.0\n","4          896       1.0"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"id":"cHjXruuDir1G","colab_type":"code","colab":{}},"source":["#csvへ\n","submit_df_int=submit_df.astype(np.int64)\n","submit_df_int.to_csv(\"submission.csv\",index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sKfFLqynqP-T","colab_type":"code","outputId":"9ddbae80-420b-441d-ed72-bda6f6f83e39","executionInfo":{"status":"ok","timestamp":1582176630419,"user_tz":-540,"elapsed":17081,"user":{"displayName":"Nin Gom","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAUg0uBfUN4VFl6zST-WRDfDHu1_oZwIGTN-mWPKx4=s64","userId":"03127363616912967740"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["!kaggle competitions submit -c titanic -f submission.csv -m 'submit'"],"execution_count":100,"outputs":[{"output_type":"stream","text":["Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","100% 2.77k/2.77k [00:10<00:00, 275B/s]\n","Successfully submitted to Titanic: Machine Learning from Disaster"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lNly6wcKqRqH","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}